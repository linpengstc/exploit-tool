#-*-coding:utf-8-*-
import re;
import getopt;
import sys;

#python parseIncDep.py -f 需要解析的文件 -d 文件所在的目录（默认为.）-l  最大层数，默认为-1 -D 依赖 -I 头文件
#developed by LP

def loadInc(dirname,filename):
	incs = []
	f = open(dirname+"/"+filename);
	incp = re.compile("^\s*include\s*\(\s*(?:\"|\')\s*(.*)\s*(?:\"|\')\s*\)");
	for line in f:
		m = incp.match(line)
		if m:
			incs.append(m.group(1).strip());
	f.close();
	return incs
def depend(dirname,filename):
	depends = []
	try:
		f = open(dirname+"/"+filename);
	except:
		return []
	#未处理换行
	#2015/8/7 incp = re.compile("^\s*script_dependencie[s]??\((.*)\)")
	incp = re.compile("^\s*script_dependencie[s]\s*?\((.*)\)")
	#考虑换行情况
	incpl = re.compile("^\s*script_dependencie[s]\s*?\(");
	#dependence结尾	
	incple = re.compile("^.*\)\s*;");
	lineflag = False;
	depline = ""
	for line in f:
		m = incp.match(line);
		if m:
			arrs = m.group(1).split(",")
			for arr in arrs:
				arr = arr.replace('"',"");
				arr = arr.strip();
				depends.append(arr)
			break;
		else:
			if lineflag == False:
				m = incpl.match(line)
				if m:
					depline += line; 
					lineflag = True;
			else:
				m = incple.match(line)
				depline += line;
				if m:
					break;
	#说明是换行，要处理
	if lineflag == True:
		p=re.compile('\s+') 
		depline=re.sub(p,'',depline)
		depline = depline.replace("script_dependencies(","").replace(")","").replace('"',"").replace(";","")
		return depline.split(",");
	#添加换行判断
	f.close();
	return depends

def parse(func,dirname,filename):
	relation = [];
	incs = func(dirname,filename);
	if len(incs)==0:
		return []
	for i in incs:
		relation.append((filename,i))
		parseRelation(func,dirname,i,relation);
	return relation
def parseRelation(func,dirname,inc,relation):
	incs = func(dirname,inc);
	for i in incs:
		if (inc,i) not in relation:
			relation.append((inc,i));
			parseRelation(func,dirname,i,relation);
	return

def nicePrint(relation,maxlevel):
	print filename
	level = 1;
	printInlevel(1,filename,relation,maxlevel)

def printInlevel(level,obj,relation,maxlevel):
	if maxlevel!=-1 and level>maxlevel:
		return
	relation2 = relation[::]
	for rel in relation:
		if obj == rel[0]:
			format = ' '*10*level +"%s"
			print (format)%(rel[1])
			relation2.remove(rel)
			printInlevel(level+1,rel[1],relation2,maxlevel)



if __name__ == '__main__':
	opts,args = getopt.getopt(sys.argv[1:],'hf:d:l:DI');
	dirname = "."
	filename = "smb_accessible_shares.nasl"
	func = depend;
	maxlevel = -1;
	for op, value in opts:
		if op == "-f":
			filename = value
		elif op == "-d":
			dirname = value
		elif op == '-D':
			func = depend
		elif op == '-I':	
			func = loadInc
		elif op == "-l":
			maxlevel = int(value)
		elif op == "-h":
			print """python parseIncDep.py \n
			-d dirname\n
			-f filename\n
			-D dependencies\n
			-I inc file\n"""
			sys.exit()
	relation = parse(func,dirname,filename)
	nicePrint(relation,maxlevel)
